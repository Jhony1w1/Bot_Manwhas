import discord
from discord.ext import commands
from pymongo import MongoClient
from datetime import datetime
import os
from dotenv import load_dotenv
import logging
import re
import asyncio

load_dotenv()
# variables de entorno
MONGO_URL = os.getenv('MONGO_URL')
DISCORD_TOKEN = os.getenv('DISCORD_BOT_TOKEN')
DATABASE_NAME = os.getenv('DATABASE_NAME')
COLLECTION_NAME = os.getenv('COLLECTION_NAME')
COLLECTION_NAME2 = os.getenv('COLLECTION_NAME2')
COLLECTION_NAME3 = os.getenv('COLLECTION_NAME3')

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuraci√≥n del bot
intents = discord.Intents.default()
intents.message_content = True # Activa la intenci√≥n de mensajes para detectar los eventos
bot = commands.Bot(command_prefix="!", intents=intents)

# Conexi√≥n a MongoDB
client = MongoClient(MONGO_URL)
db = client[DATABASE_NAME]
collection = db[COLLECTION_NAME]
collection2 = db[COLLECTION_NAME2]
collection3 = db[COLLECTION_NAME3]

usuarios_que_listaron = {}

# Evento on_ready
@bot.event
async def on_ready():
    print(f"Bot conectado como {bot.user}")


@bot.command(name='info')
async def info(ctx):

    result = collection2.find_one({"usuario": str(ctx.author)})

    if result is None:
        await ctx.send("‚ùå No tienes permisos suficientes para realizar esta acci√≥n.")
        return

    embed = discord.Embed(
        title=f"ü§ñ ¬°Hola! Soy {bot.user} üìö",
        description="Estoy aqu√≠ para ayudarte a gestionar tu colecci√≥n de manhwas. Ya que olympus no ayuda",
        color=discord.Color.blue()
    )

    # Secci√≥n de Comandos
    embed.add_field(
        name="üìã Comandos Disponibles:",
        value=(
            "**‚Ä¢ !guardar [nombre],[capitulo],[link] (opcional)**\n"
            "  Guarda un nuevo manhwa en tu lista\n\n"
            "**‚Ä¢ !listar**\n"
            "  Muestra todos tus manhwas guardados\n\n"
            "**‚Ä¢ !listar [nombre]**\n"
            "  Busca un manhwa en tu lista y selecciona hasta que capitulo has le√≠do"
        ),
        inline=False
    )

    # Pie de p√°gina
    embed.set_footer(
        text="Desarrollado por Jhony",
        icon_url=bot.user.avatar.url  # Reemplaza con tu √≠cono
    )

    await ctx.send(embed=embed)


@bot.command(name='admin')
async def admin(ctx, usuario: str):

    result = collection3.find_one({"usuario": str(ctx.author)})

    if result is None:
        await ctx.send("‚ùå No tienes permisos suficientes para realizar esta acci√≥n.")
        return

    # Crear registro
    nuevo_registro = {
        "usuario": usuario,
    }
    
    # Insertar en la base de datos
    collection3.insert_one(nuevo_registro)
    
    # Mensaje de confirmaci√≥n con embed
    embed = discord.Embed(
        title="‚úÖ Permisos concedidos", 
        color=discord.Color.green()
    )

    embed.set_footer(text=f"Guardado por {ctx.author}")

    await ctx.send(embed=embed)

@bot.command()
async def guardar(ctx, *, datos: str): # El argumento datos es una cadena que puede contener espacios, * captura toda la linea de texto
    try:
        
        result = collection2.find_one({"usuario": str(ctx.author)})

        if result is None:
            await ctx.send("‚ùå No tienes permisos suficientes para realizar esta acci√≥n.")
            return

        # Separar los datos por coma
        partes = [parte.strip() for parte in datos.split(',')]
        
        # Validar que tengamos al menos nombre y cap√≠tulo
        if len(partes) < 2:
            await ctx.send("‚ùå Formato incorrecto. Usa: nombre, cap√≠tulo, [link]")
            return
        
        # Extraer datos
        nombre = partes[0]
        
        # Convertir cap√≠tulo a entero, manejar posibles errores
        try:
            capitulo = int(partes[1])
        except ValueError:
            await ctx.send("‚ùå El cap√≠tulo debe ser un n√∫mero v√°lido.")
            return
        
        # Link es opcional
        link = partes[2] if len(partes) > 2 else None

        # Crear registro
        nuevo_registro = {
            "nombre_manhwa": nombre,
            "usuario": str(ctx.author),
            "fecha_guardado": datetime.now(),
            "capitulo": capitulo,
            "link": link
        }
        
        # Insertar en la base de datos
        collection.insert_one(nuevo_registro)
        
        # Mensaje de confirmaci√≥n con embed
        embed = discord.Embed(
            title="‚úÖ Manhwa Guardado", 
            color=discord.Color.green()
        )
        embed.add_field(name="Nombre", value=nombre, inline=False)
        embed.add_field(name="Cap√≠tulo", value=capitulo, inline=False)
        if link:
            embed.add_field(name="Link", value=link, inline=False)
        embed.set_footer(text=f"Guardado por {ctx.author}")
        
        await ctx.send(embed=embed)
    
    except Exception as e:
        await ctx.send("‚ùå Error al guardar el manhwa.")
        print(e)



@bot.command()
async def listar(ctx, nombre_manhwa: str = None):
    try:

        result = collection2.find_one({"usuario": str(ctx.author)})

        if result is None:
            await ctx.send("‚ùå No tienes permisos suficientes para realizar esta acci√≥n.")
            return
        
        usuario = str(ctx.author)

        # Almacenar el usuario que ejecut√≥ el comando
        usuarios_que_listaron['nombre'] = usuario

        # Filtrar por usuario y opcionalmente por nombre de manhwa
        query = {"usuario": usuario}
        if nombre_manhwa:
            query["nombre_manhwa"] = {"$regex": nombre_manhwa, "$options": "i"}  # B√∫squeda parcial e insensible a may√∫sculas

        registros = list(collection.find(query))
        if not registros:
            await ctx.send("üîç No se encontraron manhwas para este usuario.")
            return

        embeds = []
        current_embed = discord.Embed(
            title=f"üìö Manhwas de {usuario}",
            color=discord.Color.blue()
        )

        if nombre_manhwa:
            # Mostrar el manhwa con su cap√≠tulo y enlaces a los siguientes cap√≠tulos
            for registro in registros[:1]:  # Solo mostrar el manhwa que coincida con el nombre
                valor_manhwa = (
                    f"**Cap√≠tulo actual:** {registro['capitulo']}\n"
                    f"**Fecha Guardado:** {registro['fecha_guardado'].strftime('%Y-%m-%d')}\n"
                    f"**Link:** [Ir al manhwa]({registro['link']})"
                )

                current_embed.add_field(
                    name=f"üìñ {registro['nombre_manhwa']}",
                    value=valor_manhwa,
                    inline=False
                )

            embeds.append(current_embed)

            # Crear 5 embeds con los enlaces a los pr√≥ximos 5 cap√≠tulos (cada uno en su propio embed)
            for i in range(1, 6):
                siguiente_capitulo = registro['capitulo'] + i
                link_capitulo = f"[Cap√≠tulo {siguiente_capitulo}](https://discord.com/channels/{ctx.guild.id}/{ctx.channel.id}/{str(registro['_id'])}/{siguiente_capitulo})"
                
                chapter_embed = discord.Embed(
                    title=f"üìö Cap√≠tulo {siguiente_capitulo} de {registro['nombre_manhwa']}",
                    color=discord.Color.green()
                )
                chapter_embed.add_field(
                    name=f"Cap√≠tulo {siguiente_capitulo}",
                    value=link_capitulo,
                    inline=False
                )

                embeds.append(chapter_embed)

        else:
            # Mostrar los primeros 5 manhwas sin enlaces a cap√≠tulos
            for registro in registros[-25:]:
                valor_manhwa = (
                    f"**Cap√≠tulo actual:** {registro['capitulo']}\n"
                    f"**Fecha Guardado:** {registro['fecha_guardado'].strftime('%Y-%m-%d')}"
                )

                current_embed.add_field(
                    name=f"üìñ {registro['nombre_manhwa']}",
                    value=valor_manhwa,
                    inline=False
                )

            embeds.append(current_embed)

        # Enviar todos los embeds generados
        for embed in embeds:
            message = await ctx.send(embed=embed)

            # Solo agregar reacci√≥n si estamos en el contexto de un manhwa espec√≠fico
            if nombre_manhwa:
                # Solo agregar la reacci√≥n a los embeds de cap√≠tulos
                if "Cap√≠tulo" in embed.title:
                    await message.add_reaction('‚úÖ')
                    
        # Esperar 30 segundos para permitir reacciones
        await asyncio.sleep(30)

        # Despu√©s del tiempo, limpiar el estado si a√∫n no se proces√≥ ninguna reacci√≥n
        if usuarios_que_listaron.get('nombre') == usuario:
            del usuarios_que_listaron['nombre']
            await ctx.send(f"‚è≥ Se agot√≥ el tiempo para reaccionar.")

    except Exception as e:
        await ctx.send("‚ùå Hubo un error al listar los manhwas.")
        print(e)

@bot.event
async def on_reaction_add(reaction, user):
    if user == bot.user:
        return  # Ignorar las reacciones del bot
    
    if not usuarios_que_listaron:
        return

    # Verificar que el que reaccion√≥ sea igual al que list√≥
    if str(user) != str(usuarios_que_listaron['nombre']):
        print("Entr√≥, as√≠ que hay un error")
        await reaction.message.channel.send(f"‚ùå {user} no puedes reaccionar porque no listaste este manhwa.")
        return
            
    print("No hubo error")

    # Limpiar el diccionario s√≥lo cuando se proces√≥ correctamente
    del usuarios_que_listaron['nombre']

    # Verificar que la reacci√≥n sea de un cap√≠tulo (en este caso, '‚úÖ')
    if reaction.emoji == '‚úÖ':
        try:
            # Obtener el t√≠tulo del embed (nombre del manhwa)
            nombre_manhwa = reaction.message.embeds[0].title.split(" de ")[1].strip()

            message = reaction.message
            # Intentar extraer el cap√≠tulo del t√≠tulo del embed usando expresi√≥n regular
            match = re.search(r"Cap√≠tulo (\d+)", message.embeds[0].title)

            if match:
                capitulo = int(match.group(1))  # Extraemos el cap√≠tulo como n√∫mero
            else:
                raise ValueError("No se pudo encontrar el cap√≠tulo en el t√≠tulo.")

            # Realizar la b√∫squeda en la base de datos de manera flexible
            manhwa = collection.find_one({"nombre_manhwa": {"$regex": f"^{re.escape(nombre_manhwa)}$", "$options": "i"}})

            if manhwa:
                # Actualizar el cap√≠tulo
                capitulo_siguiente = capitulo
                fecha_actualizacion = datetime.now()  # Fecha y hora actual
                result = collection.update_one(
                    {"_id": manhwa["_id"]},
                    {"$set": {"capitulo": capitulo_siguiente, "fecha_guardado": fecha_actualizacion}}
                )

                if result.modified_count > 0:
                    await reaction.message.channel.send(f"‚úÖ El manhwa **{nombre_manhwa}** ha sido actualizado al capitulo **{capitulo}**.")
                else:
                    await reaction.message.channel.send("‚ùå No se pudo actualizar el cap√≠tulo.")
            else:
                await reaction.message.channel.send(f"‚ùå No se encontr√≥ el manhwa '{nombre_manhwa}'.")

        except Exception as e:
            await reaction.message.channel.send(f"‚ùå Error al procesar la reacci√≥n: {str(e)}")

# Token del bot
bot.run(DISCORD_TOKEN)
